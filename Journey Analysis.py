# -*- coding: utf-8 -*-
"""analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15uRyYyLz_SHDhnyRwIpBDVSQeDpEqLFV
"""

!pip install -U scikit-learn

import pandas as pd
import numpy as np
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error,r2_score
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv("/content/Daily_Public_Transport_Passenger_Journeys_by_Service_Type_20241028.csv")
data

"""**preprocess the data**"""

data['Date'] = pd.to_datetime(data['Date'], errors='coerce')
data.fillna(data.median(), inplace=True)
data.set_index('Date', inplace=True)

data.head()

data.describe()

monthly_data = data.resample('M').mean()
monthly_data.plot(figsize=(12, 6))
plt.title('Average Monthly Passenger Counts for Each Service')
plt.xlabel('Month')
plt.ylabel('Passenger Counts')
plt.legend()
plt.show()

average_monthly_counts = monthly_data.mean()

plt.figure(figsize=(10, 6))
average_monthly_counts.plot(kind='bar', color='skyblue')
plt.title('Average Monthly Passenger Count for Each Service')
plt.xlabel('Service Type')
plt.ylabel('Average Monthly Passenger Count')
plt.xticks(rotation=0)
plt.show()

data['DayOfWeek'] = data.index.dayofweek
data['IsWeekend'] = data['DayOfWeek'] >= 5

weekday_avg = data[data['IsWeekend'] == False].mean()
weekend_avg = data[data['IsWeekend'] == True].mean()

fig, ax = plt.subplots(figsize=(10, 6))
weekday_avg.plot(kind='bar', color='skyblue', ax=ax, label='Weekday')
weekend_avg.plot(kind='bar', color='salmon', ax=ax, alpha=0.7, label='Weekend')
plt.title('Average Passenger Counts: Weekday vs Weekend')
plt.ylabel('Average Passenger Count')
plt.legend()
plt.show()

data['Weekday'] = data.index.dayofweek
plt.figure(figsize=(14, 8))
sns.boxplot(data=data, x='Weekday', y='Local Route')  # Change 'Local Route' to other types if needed
plt.title("Weekly Passenger Patterns for Local Route")
plt.xlabel("Day of the Week (0=Monday, 6=Sunday)")
plt.ylabel("Passenger Count")
plt.show()

data['DayOfWeek'] = data.index.dayofweek
weekly_avg = data.groupby('DayOfWeek').mean()
print("\n**Average Ridership by Day of the Week:**")
print(weekly_avg)

data['DayOfWeek'] = data.index.day_name()
avg_by_day = data.groupby('DayOfWeek').mean()

plt.figure(figsize=(10, 6))
sns.heatmap(avg_by_day.transpose(), annot=True, cmap="YlGnBu", cbar_kws={'label': 'Average Passenger Count'})
plt.title("Average Ridership by Day of the Week for Each Service Type")
plt.xlabel("Day of the Week")
plt.ylabel("Service Type")
plt.show()

dominant_service = monthly_data.idxmax(axis=1)

plt.figure(figsize=(15, 6))
dominant_service.value_counts().plot(kind='bar', color='teal')
plt.title("Most Dominant Service Type by Month")
plt.xlabel("Service Type")
plt.ylabel("Number of Months as Dominant Service")
plt.show()

correlation_matrix = data[['Local Route', 'Light Rail', 'Peak Service', 'Rapid Route', 'School', 'Other']].corr()

plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", vmin=-1, vmax=1)
plt.title("Correlation Between Service Types")
plt.show()

service_type = 'Local Route'
monthly_data['Lag_1'] = monthly_data[service_type].shift(1)
monthly_data['Lag_2'] = monthly_data[service_type].shift(2)
monthly_data['Lag_3'] = monthly_data[service_type].shift(3)
monthly_data.dropna(inplace=True)

X = monthly_data[['Lag_1', 'Lag_2', 'Lag_3']]
y = monthly_data[service_type]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

"""INITIALIZE AND TRAIN THE XGBOOST MODEL"""

model = XGBRegressor(objective='reg:squarederror', n_estimators=100, learning_rate=0.01)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"Mean Absolute Error: {mae}")
print(f"RÂ² Score:",r2)

plt.figure(figsize=(12, 6))
plt.plot(y_test.index, y_test, label='Actual')
plt.plot(y_test.index, y_pred, label='Predicted', linestyle='--')
plt.title(f"Actual vs Predicted Passenger Journeys - {service_type}")
plt.xlabel("Date")
plt.ylabel("Passenger Journeys")
plt.legend()
plt.show()